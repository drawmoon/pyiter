window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"pyiter": {"fullname": "pyiter", "modulename": "pyiter", "type": "module", "doc": "<p>PyIter is a Python package for iterative operations inspired by the Kotlin\u3001CSharp(linq)\u3001\nTypeSrcipt and Rust . Enables strong typing and type inference for iterative operations.</p>\n"}, "pyiter.sequence": {"fullname": "pyiter.sequence", "modulename": "pyiter.sequence", "type": "module", "doc": "<p></p>\n"}, "pyiter.sequence.Sequence": {"fullname": "pyiter.sequence.Sequence", "modulename": "pyiter.sequence", "qualname": "Sequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "typing.Generic[~T], typing.Iterable[~T]"}, "pyiter.sequence.Sequence.__init__": {"fullname": "pyiter.sequence.Sequence.__init__", "modulename": "pyiter.sequence", "qualname": "Sequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, v: Iterable[~T])", "funcdef": "def"}, "pyiter.sequence.Sequence.filter": {"fullname": "pyiter.sequence.Sequence.filter", "modulename": "pyiter.sequence", "qualname": "Sequence.filter", "type": "function", "doc": "<p>Returns a Sequence containing only elements matching the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a1&#39;, &#39;a2&#39;]</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_indexed": {"fullname": "pyiter.sequence.Sequence.filter_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_indexed", "type": "function", "doc": "<p>Returns a Sequence containing only elements matching the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_indexed</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b2&#39;]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    predicate: Callable[[~T, int], bool]\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_is_instance": {"fullname": "pyiter.sequence.Sequence.filter_is_instance", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_is_instance", "type": "function", "doc": "<p>Returns a Sequence containing all elements that are instances of specified type parameter r_type.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_is_instance</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 3]</span>\n</code></pre></div>\n", "signature": "(self, r_type: Type[~R]) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_not": {"fullname": "pyiter.sequence.Sequence.filter_not", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_not", "type": "function", "doc": "<p>Returns a Sequence containing all elements not matching the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_not</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b1&#39;, &#39;b2&#39;]</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.filter_not_none": {"fullname": "pyiter.sequence.Sequence.filter_not_none", "modulename": "pyiter.sequence", "qualname": "Sequence.filter_not_none", "type": "function", "doc": "<p>Returns a Sequence containing all elements that are not <code>None</code>.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_not_none</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre></div>\n", "signature": "(self) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.map": {"fullname": "pyiter.sequence.Sequence.map", "modulename": "pyiter.sequence", "qualname": "Sequence.map", "type": "function", "doc": "<p>Returns a Sequence containing the results of applying the given [transform] function\n to each element in the original Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre></div>\n", "signature": "(self, transform: Callable[[~T], ~R]) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.map_indexed": {"fullname": "pyiter.sequence.Sequence.map_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.map_indexed", "type": "function", "doc": "<p>Returns a Sequence containing the results of applying the given [transform] function\n to each element in the original Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_indexed</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 14]</span>\n</code></pre></div>\n", "signature": "(self, transform: Callable[[~T, int], ~R]) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.map_not_none": {"fullname": "pyiter.sequence.Sequence.map_not_none", "modulename": "pyiter.sequence", "qualname": "Sequence.map_not_none", "type": "function", "doc": "<p>Returns a Sequence containing only the non-none results of applying the given [transform] function\nto each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map_not_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Callable[[~T], Union[~R, NoneType]]\n) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_map": {"fullname": "pyiter.sequence.Sequence.parallel_map", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_map", "type": "function", "doc": "<p>Returns a Sequence containing the results of applying the given [transform] function\n to each element in the original Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">],</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[12, 13]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Callable[[~T], ~R],\n    max_workers: Union[int, NoneType] = None,\n    chunksize: int = 1,\n    executor: Literal['Thread', 'Process'] = 'Thread'\n) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.find": {"fullname": "pyiter.sequence.Sequence.find", "modulename": "pyiter.sequence", "qualname": "Sequence.find", "type": "function", "doc": "<p>Returns the first element matching the given [predicate], or <code>None</code> if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.find_last": {"fullname": "pyiter.sequence.Sequence.find_last", "modulename": "pyiter.sequence", "qualname": "Sequence.find_last", "type": "function", "doc": "<p>Returns the last element matching the given [predicate], or <code>None</code> if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;b&#39;</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.first": {"fullname": "pyiter.sequence.Sequence.first", "modulename": "pyiter.sequence", "qualname": "Sequence.first", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Union[Callable[[~T], bool], NoneType] = None) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.first_not_none_of": {"fullname": "pyiter.sequence.Sequence.first_not_none_of", "modulename": "pyiter.sequence", "qualname": "Sequence.first_not_none_of", "type": "function", "doc": "<p>Returns the first non-<code>None</code> result of applying the given [transform] function to each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">12</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_none_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">No element of the Sequence was transformed to a non-none value.</span>\n</code></pre></div>\n", "signature": "(self, transform: Callable[[~T], Union[~R, NoneType]]) -> ~R", "funcdef": "def"}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"fullname": "pyiter.sequence.Sequence.first_not_null_of_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.first_not_null_of_or_none", "type": "function", "doc": "<p>Returns the first non-<code>None</code> result of applying the given [transform] function to each element in the original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_null_of_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">12</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_not_null_of_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Callable[[~T], Union[~R, NoneType]]\n) -> Union[~R, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.first_or_none": {"fullname": "pyiter.sequence.Sequence.first_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.first_or_none", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    predicate: Union[Callable[[~T], bool], NoneType] = None\n) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.first_or_default": {"fullname": "pyiter.sequence.Sequence.first_or_default", "modulename": "pyiter.sequence", "qualname": "Sequence.first_or_default", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Union[Callable[[~T], bool], ~T], default: ~T) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.last": {"fullname": "pyiter.sequence.Sequence.last", "modulename": "pyiter.sequence", "qualname": "Sequence.last", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Union[Callable[[~T], bool], NoneType] = None) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.last_or_none": {"fullname": "pyiter.sequence.Sequence.last_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.last_or_none", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    predicate: Union[Callable[[~T], bool], NoneType] = None\n) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of": {"fullname": "pyiter.sequence.Sequence.index_of", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of", "type": "function", "doc": "<p>Returns first index of [element], or -1 if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre></div>\n", "signature": "(self, element: ~T) -> int", "funcdef": "def"}, "pyiter.sequence.Sequence.last_index_of": {"fullname": "pyiter.sequence.Sequence.last_index_of", "modulename": "pyiter.sequence", "qualname": "Sequence.last_index_of", "type": "function", "doc": "<p>Returns last index of [element], or -1 if the collection does not contain element.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">last_index_of</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre></div>\n", "signature": "(self, element: ~T) -> int", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_first": {"fullname": "pyiter.sequence.Sequence.index_of_first", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_first", "type": "function", "doc": "<p>Returns first index of element matching the given [predicate], or -1 if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_first</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> int", "funcdef": "def"}, "pyiter.sequence.Sequence.index_of_last": {"fullname": "pyiter.sequence.Sequence.index_of_last", "modulename": "pyiter.sequence", "qualname": "Sequence.index_of_last", "type": "function", "doc": "<p>Returns last index of element matching the given [predicate], or -1 if no such element was found.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index_of_last</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> int", "funcdef": "def"}, "pyiter.sequence.Sequence.single": {"fullname": "pyiter.sequence.Sequence.single", "modulename": "pyiter.sequence", "qualname": "Sequence.single", "type": "function", "doc": "<p></p>\n", "signature": "(self, predicate: Union[Callable[[~T], bool], NoneType] = None) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.single_or_none": {"fullname": "pyiter.sequence.Sequence.single_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.single_or_none", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    predicate: Union[Callable[[~T], bool], NoneType] = None\n) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.drop": {"fullname": "pyiter.sequence.Sequence.drop", "modulename": "pyiter.sequence", "qualname": "Sequence.drop", "type": "function", "doc": "<p>Returns a Sequence containing all elements except first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.drop_while": {"fullname": "pyiter.sequence.Sequence.drop_while", "modulename": "pyiter.sequence", "qualname": "Sequence.drop_while", "type": "function", "doc": "<p>Returns a Sequence containing all elements except first elements that satisfy the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 4, 1]</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.skip": {"fullname": "pyiter.sequence.Sequence.skip", "modulename": "pyiter.sequence", "qualname": "Sequence.skip", "type": "function", "doc": "<p>Returns a Sequence containing all elements except first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.skip_while": {"fullname": "pyiter.sequence.Sequence.skip_while", "modulename": "pyiter.sequence", "qualname": "Sequence.skip_while", "type": "function", "doc": "<p>Returns a Sequence containing all elements except first elements that satisfy the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 4, 1]</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.take": {"fullname": "pyiter.sequence.Sequence.take", "modulename": "pyiter.sequence", "qualname": "Sequence.take", "type": "function", "doc": "<p>Returns an Sequence containing first [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.take_while": {"fullname": "pyiter.sequence.Sequence.take_while", "modulename": "pyiter.sequence", "qualname": "Sequence.take_while", "type": "function", "doc": "<p>Returns an Sequence containing first elements satisfying the given [predicate].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_while</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;]</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.take_last": {"fullname": "pyiter.sequence.Sequence.take_last", "modulename": "pyiter.sequence", "qualname": "Sequence.take_last", "type": "function", "doc": "<p>Returns an Sequence containing last [n] elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_last</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">take_last</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted": {"fullname": "pyiter.sequence.Sequence.sorted", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted", "type": "function", "doc": "<p>Returns an Sequence that yields elements of this Sequence sorted according to their natural sort order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2, 3, 4]</span>\n</code></pre></div>\n", "signature": "(self) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_by": {"fullname": "pyiter.sequence.Sequence.sorted_by", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_by", "type": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted according to natural sort\norder of the value returned by specified [key_selector] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}]</span>\n</code></pre></div>\n", "signature": "(self, key_selector: Callable[[~T], ~R]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_descending": {"fullname": "pyiter.sequence.Sequence.sorted_descending", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_descending", "type": "function", "doc": "<p>Returns a Sequence of all elements sorted descending according to their natural sort order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_descending</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span>\n</code></pre></div>\n", "signature": "(self) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_by_descending": {"fullname": "pyiter.sequence.Sequence.sorted_by_descending", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_by_descending", "type": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted descending according\nto natural sort order of the value returned by specified [key_selector] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">10</span> <span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span> <span class=\"p\">}</span> <span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by_descending</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_by_descending</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[{&#39;name&#39;: &#39;A&#39;, &#39;age&#39;: 12}, {&#39;name&#39;: &#39;B&#39;, &#39;age&#39;: 11}, {&#39;name&#39;: &#39;C&#39;, &#39;age&#39;: 10}]</span>\n</code></pre></div>\n", "signature": "(self, key_selector: Callable[[~T], ~R]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.sorted_with": {"fullname": "pyiter.sequence.Sequence.sorted_with", "modulename": "pyiter.sequence", "qualname": "Sequence.sorted_with", "type": "function", "doc": "<p>Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;aa&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bbb&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted_with</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;aa&#39;, &#39;bbb&#39;]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    comparator: Callable[[~T, ~T], int]\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.associate": {"fullname": "pyiter.sequence.Sequence.associate", "modulename": "pyiter.sequence", "qualname": "Sequence.associate", "type": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">associate</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre></div>\n", "signature": "(self, transform: Callable[[~T], Tuple[~K, ~V]]) -> Dict[~K, ~V]", "funcdef": "def"}, "pyiter.sequence.Sequence.associate_by": {"fullname": "pyiter.sequence.Sequence.associate_by", "modulename": "pyiter.sequence", "qualname": "Sequence.associate_by", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    key_selector: Callable[[~T], ~K],\n    value_transform: Union[Callable[[~T], ~V], NoneType] = None\n) -> Dict[~K, Union[~V, ~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.associate_by_to": {"fullname": "pyiter.sequence.Sequence.associate_by_to", "modulename": "pyiter.sequence", "qualname": "Sequence.associate_by_to", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    destination: Dict[~K, ~V],\n    key_selector: Callable[[~T], ~K],\n    value_transform: Union[Callable[[~T], ~V], NoneType] = None\n) -> Dict[~K, Union[~V, ~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.all": {"fullname": "pyiter.sequence.Sequence.all", "modulename": "pyiter.sequence", "qualname": "Sequence.all", "type": "function", "doc": "<p>Returns True if all elements of the Sequence satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> bool", "funcdef": "def"}, "pyiter.sequence.Sequence.any": {"fullname": "pyiter.sequence.Sequence.any", "modulename": "pyiter.sequence", "qualname": "Sequence.any", "type": "function", "doc": "<p>Returns True if any elements of the Sequence satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre></div>\n", "signature": "(self, predicate: Callable[[~T], bool]) -> bool", "funcdef": "def"}, "pyiter.sequence.Sequence.count": {"fullname": "pyiter.sequence.Sequence.count", "modulename": "pyiter.sequence", "qualname": "Sequence.count", "type": "function", "doc": "<p>Returns the number of elements in the Sequence that satisfy the specified [predicate] function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n", "signature": "(self, predicate: Union[Callable[[~T], bool], NoneType] = None) -> int", "funcdef": "def"}, "pyiter.sequence.Sequence.contains": {"fullname": "pyiter.sequence.Sequence.contains", "modulename": "pyiter.sequence", "qualname": "Sequence.contains", "type": "function", "doc": "<p>Returns True if the Sequence contains the specified [value].</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre></div>\n", "signature": "(self, value: ~T) -> bool", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at": {"fullname": "pyiter.sequence.Sequence.element_at", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at", "type": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">IndexError</span>: <span class=\"n\">Index 3 out of range</span>\n</code></pre></div>\n", "signature": "(self, index: int) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_else": {"fullname": "pyiter.sequence.Sequence.element_at_or_else", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_else", "type": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or the [default] value if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_else</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_else</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;default&#39;</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    index: int,\n    default: Union[Callable[[int], ~T], ~T, NoneType]\n) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_default": {"fullname": "pyiter.sequence.Sequence.element_at_or_default", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_default", "type": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or the [default] value if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_default</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_default</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;default&#39;</span>\n</code></pre></div>\n", "signature": "(self, index: int, default: ~T) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.element_at_or_none": {"fullname": "pyiter.sequence.Sequence.element_at_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.element_at_or_none", "type": "function", "doc": "<p>Returns the element at the specified [index] in the Sequence or None if the index is out of bounds.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_none</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">element_at_or_none</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n", "signature": "(self, index: int) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.distinct": {"fullname": "pyiter.sequence.Sequence.distinct", "modulename": "pyiter.sequence", "qualname": "Sequence.distinct", "type": "function", "doc": "<p>Returns a new Sequence containing the distinct elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2, 3]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(1, &#39;A&#39;), (2, &#39;A&#39;), (3, &#39;C&#39;), (3, &#39;D&#39;)]</span>\n</code></pre></div>\n", "signature": "(self) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.distinct_by": {"fullname": "pyiter.sequence.Sequence.distinct_by", "modulename": "pyiter.sequence", "qualname": "Sequence.distinct_by", "type": "function", "doc": "<p>Returns a new Sequence containing the distinct elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[1, 2]</span>\n</code></pre></div>\n", "signature": "(self, key_selector: Callable[[~T], ~K]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.reduce": {"fullname": "pyiter.sequence.Sequence.reduce", "modulename": "pyiter.sequence", "qualname": "Sequence.reduce", "type": "function", "doc": "<p>Returns the result of applying the specified [accumulator] function to the given Sequence's elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    accumulator: Callable[[~R, ~T], ~R],\n    initial: Union[~R, NoneType] = None\n) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.fold": {"fullname": "pyiter.sequence.Sequence.fold", "modulename": "pyiter.sequence", "qualname": "Sequence.fold", "type": "function", "doc": "<p>Returns the result of applying the specified [accumulator] function to the given Sequence's elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre></div>\n", "signature": "(self, initial: ~R, accumulator: Callable[[~R, ~T], ~R]) -> ~R", "funcdef": "def"}, "pyiter.sequence.Sequence.sum_of": {"fullname": "pyiter.sequence.Sequence.sum_of", "modulename": "pyiter.sequence", "qualname": "Sequence.sum_of", "type": "function", "doc": "<p>Returns the sum of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> Union[int, float]", "funcdef": "def"}, "pyiter.sequence.Sequence.max_of": {"fullname": "pyiter.sequence.Sequence.max_of", "modulename": "pyiter.sequence", "qualname": "Sequence.max_of", "type": "function", "doc": "<p>Returns the maximum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> Union[int, float]", "funcdef": "def"}, "pyiter.sequence.Sequence.max_by_or_none": {"fullname": "pyiter.sequence.Sequence.max_by_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.max_by_or_none", "type": "function", "doc": "<p>Returns the first element yielding the largest value of the given function\n or <code>none</code> if there are no elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;B&#39;, &#39;num&#39;: 200}</span>\n</code></pre></div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.max_by": {"fullname": "pyiter.sequence.Sequence.max_by", "modulename": "pyiter.sequence", "qualname": "Sequence.max_by", "type": "function", "doc": "<p>Returns the first element yielding the largest value of the given function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;B&#39;, &#39;num&#39;: 200}</span>\n</code></pre></div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.min_of": {"fullname": "pyiter.sequence.Sequence.min_of", "modulename": "pyiter.sequence", "qualname": "Sequence.min_of", "type": "function", "doc": "<p></p>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> Union[int, float]", "funcdef": "def"}, "pyiter.sequence.Sequence.min_by_or_none": {"fullname": "pyiter.sequence.Sequence.min_by_or_none", "modulename": "pyiter.sequence", "qualname": "Sequence.min_by_or_none", "type": "function", "doc": "<p>Returns the first element yielding the smallest value of the given function\n or <code>none</code> if there are no elements.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;A&#39;, &#39;num&#39;: 100}</span>\n</code></pre></div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by_or_none</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], float]) -> Union[~T, NoneType]", "funcdef": "def"}, "pyiter.sequence.Sequence.min_by": {"fullname": "pyiter.sequence.Sequence.min_by", "modulename": "pyiter.sequence", "qualname": "Sequence.min_by", "type": "function", "doc": "<p>Returns the first element yielding the smallest value of the given function.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">100</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"mi\">200</span> <span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">{&#39;name&#39;: &#39;A&#39;, &#39;num&#39;: 100}</span>\n</code></pre></div>\n\n<p>Exmaple 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Sequence is empty.</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], float]) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.mean_of": {"fullname": "pyiter.sequence.Sequence.mean_of", "modulename": "pyiter.sequence", "qualname": "Sequence.mean_of", "type": "function", "doc": "<p>Returns the mean of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean_of</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n</code></pre></div>\n", "signature": "(self, selector: Callable[[~T], Union[int, float]]) -> Union[int, float]", "funcdef": "def"}, "pyiter.sequence.Sequence.sum": {"fullname": "pyiter.sequence.Sequence.sum", "modulename": "pyiter.sequence", "qualname": "Sequence.sum", "type": "function", "doc": "<p>Returns the sum of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">6</span>\n</code></pre></div>\n", "signature": "(\n    self: pyiter.sequence.Sequence[typing.Union[float, int]]\n) -> Union[float, int]", "funcdef": "def"}, "pyiter.sequence.Sequence.max": {"fullname": "pyiter.sequence.Sequence.max", "modulename": "pyiter.sequence", "qualname": "Sequence.max", "type": "function", "doc": "<p>Returns the maximum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n</code></pre></div>\n", "signature": "(\n    self: pyiter.sequence.Sequence[typing.Union[float, int]]\n) -> Union[float, int]", "funcdef": "def"}, "pyiter.sequence.Sequence.min": {"fullname": "pyiter.sequence.Sequence.min", "modulename": "pyiter.sequence", "qualname": "Sequence.min", "type": "function", "doc": "<p>Returns the minimum element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">()</span>\n<span class=\"go\">1</span>\n</code></pre></div>\n", "signature": "(\n    self: pyiter.sequence.Sequence[typing.Union[float, int]]\n) -> Union[float, int]", "funcdef": "def"}, "pyiter.sequence.Sequence.mean": {"fullname": "pyiter.sequence.Sequence.mean", "modulename": "pyiter.sequence", "qualname": "Sequence.mean", "type": "function", "doc": "<p>Returns the mean of the elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">2.0</span>\n</code></pre></div>\n", "signature": "(\n    self: pyiter.sequence.Sequence[typing.Union[float, int]]\n) -> Union[int, float]", "funcdef": "def"}, "pyiter.sequence.Sequence.reversed": {"fullname": "pyiter.sequence.Sequence.reversed", "modulename": "pyiter.sequence", "qualname": "Sequence.reversed", "type": "function", "doc": "<p>Returns a list with elements in reversed order.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;c&#39;, &#39;b&#39;]</span>\n</code></pre></div>\n", "signature": "(self) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.flat_map": {"fullname": "pyiter.sequence.Sequence.flat_map", "modulename": "pyiter.sequence", "qualname": "Sequence.flat_map", "type": "function", "doc": "<p>Returns a single list of all elements yielded from results of [transform]\nfunction being invoked on each element of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Callable[[~T], Iterable[~R]]\n) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.flatten": {"fullname": "pyiter.sequence.Sequence.flatten", "modulename": "pyiter.sequence", "qualname": "Sequence.flatten", "type": "function", "doc": "<p>Returns a sequence of all elements from all sequences in this sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>\n</code></pre></div>\n", "signature": "(\n    self: pyiter.sequence.Sequence[typing.Iterable[~R]]\n) -> pyiter.sequence.Sequence[~R]", "funcdef": "def"}, "pyiter.sequence.Sequence.group_by": {"fullname": "pyiter.sequence.Sequence.group_by", "modulename": "pyiter.sequence", "qualname": "Sequence.group_by", "type": "function", "doc": "<p>Returns a dictionary with keys being the result of [key_selector] function being invoked on each element of original collection\nand values being the corresponding elements of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(1, [1, 3, 5]), (0, [2, 4])]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    key_selector: Callable[[~T], ~K]\n) -> pyiter.sequence.GroupingSequence[~K, ~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.group_by_to": {"fullname": "pyiter.sequence.Sequence.group_by_to", "modulename": "pyiter.sequence", "qualname": "Sequence.group_by_to", "type": "function", "doc": "<p>Returns a dictionary with keys being the result of [key_selector] function being invoked on each element of original collection\nand values being the corresponding elements of original collection.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by_to</span><span class=\"p\">({},</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">{1: [1, 3, 5], 0: [2, 4]}</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    destination: Dict[~K, List[~T]],\n    key_selector: Callable[[~T], ~K]\n) -> Dict[~K, List[~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.for_each": {"fullname": "pyiter.sequence.Sequence.for_each", "modulename": "pyiter.sequence", "qualname": "Sequence.for_each", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n", "signature": "(self, action: Callable[[~T], NoneType]) -> None", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_for_each": {"fullname": "pyiter.sequence.Sequence.parallel_for_each", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_for_each", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence in parallel.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_for_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    action: Callable[[~T], NoneType],\n    max_workers: Union[int, NoneType] = None\n) -> None", "funcdef": "def"}, "pyiter.sequence.Sequence.foreach_indexed": {"fullname": "pyiter.sequence.Sequence.foreach_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.foreach_indexed", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">foreach_indexed</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n<span class=\"go\">a 0</span>\n<span class=\"go\">b 1</span>\n<span class=\"go\">c 2</span>\n</code></pre></div>\n", "signature": "(self, action: Callable[[~T, int], NoneType]) -> None", "funcdef": "def"}, "pyiter.sequence.Sequence.on_each": {"fullname": "pyiter.sequence.Sequence.on_each", "modulename": "pyiter.sequence", "qualname": "Sequence.on_each", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n", "signature": "(self, action: Callable[[~T], NoneType]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.parallel_on_each": {"fullname": "pyiter.sequence.Sequence.parallel_on_each", "modulename": "pyiter.sequence", "qualname": "Sequence.parallel_on_each", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parallel_on_each</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a</span>\n<span class=\"go\">b</span>\n<span class=\"go\">c</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    action: Callable[[~T], NoneType],\n    max_workers: Union[int, NoneType] = None,\n    chunksize: int = 1,\n    executor: Literal['Thread', 'Process'] = 'Thread'\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.on_each_indexed": {"fullname": "pyiter.sequence.Sequence.on_each_indexed", "modulename": "pyiter.sequence", "qualname": "Sequence.on_each_indexed", "type": "function", "doc": "<p>Invokes [action] function on each element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_each_indexed</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"go\">a 0</span>\n<span class=\"go\">b 1</span>\n<span class=\"go\">c 2</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    action: Callable[[~T, int], NoneType]\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.zip": {"fullname": "pyiter.sequence.Sequence.zip", "modulename": "pyiter.sequence", "qualname": "Sequence.zip", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    other: Iterable[~R],\n    transform: Callable[[~T, ~R], ~V] = <function Sequence.<lambda>>\n) -> pyiter.sequence.Sequence[~V]", "funcdef": "def"}, "pyiter.sequence.Sequence.zip_with_next": {"fullname": "pyiter.sequence.Sequence.zip_with_next", "modulename": "pyiter.sequence", "qualname": "Sequence.zip_with_next", "type": "function", "doc": "<p>Returns a sequence containing the results of applying the given [transform] function\nto an each pair of two adjacent elements in this sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip_with_next</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;__&#39;</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a__b&#39;, &#39;b__c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">zip_with_next</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, &#39;b&#39;), (&#39;b&#39;, &#39;c&#39;)]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Union[Callable[[~T, ~T], ~V], NoneType] = None\n) -> Tuple[pyiter.sequence.Sequence[~V], pyiter.sequence.Sequence[Tuple[~T, ~T]]]", "funcdef": "def"}, "pyiter.sequence.Sequence.unzip": {"fullname": "pyiter.sequence.Sequence.unzip", "modulename": "pyiter.sequence", "qualname": "Sequence.unzip", "type": "function", "doc": "<p>Returns a pair of lists, where first list is built from the first values of each pair from this array, second list is built from the second values of each pair from this array.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;age&#39;</span><span class=\"p\">:</span> <span class=\"mi\">13</span><span class=\"p\">}]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unzip</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">[11, 12, 13]</span>\n</code></pre></div>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unzip</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">[11, 12, 13]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Union[Callable[[~T], Tuple[~R, ~V]], NoneType, bool] = None,\n    as_sequence: bool = False\n)", "funcdef": "def"}, "pyiter.sequence.Sequence.with_index": {"fullname": "pyiter.sequence.Sequence.with_index", "modulename": "pyiter.sequence", "qualname": "Sequence.with_index", "type": "function", "doc": "<p>Returns a sequence containing the elements of this sequence and their indexes.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[IndexedValue(0, a), IndexedValue(1, b), IndexedValue(2, c)]</span>\n</code></pre></div>\n", "signature": "(self)", "funcdef": "def"}, "pyiter.sequence.Sequence.shuffled": {"fullname": "pyiter.sequence.Sequence.shuffled", "modulename": "pyiter.sequence", "qualname": "Sequence.shuffled", "type": "function", "doc": "<p>Returns a sequence that yields elements of this sequence randomly shuffled\nusing the specified [random] instance as the source of randomness.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;a&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">Random</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"n\">Random</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;a&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    random: Union[random.Random, str, int, NoneType] = None\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.partition": {"fullname": "pyiter.sequence.Sequence.partition", "modulename": "pyiter.sequence", "qualname": "Sequence.partition", "type": "function", "doc": "<p>Partitions the elements of the given Sequence into two groups,\n the first group containing the elements for which the predicate returns true,\n and the second containing the rest.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">isalpha</span><span class=\"p\">())</span>\n<span class=\"go\">([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;2&#39;])</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    predicate: Callable[[~T], bool],\n    as_sequence: bool = False\n) -> Tuple[pyiter.sequence.Sequence[~T], pyiter.sequence.Sequence[~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.combinations": {"fullname": "pyiter.sequence.Sequence.combinations", "modulename": "pyiter.sequence", "qualname": "Sequence.combinations", "type": "function", "doc": "<p>Returns a Sequence of all possible combinations of size [n] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">combinations</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;), (&#39;b&#39;, &#39;c&#39;)]</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> pyiter.sequence.Sequence[typing.Tuple[~T, ...]]", "funcdef": "def"}, "pyiter.sequence.Sequence.nth": {"fullname": "pyiter.sequence.Sequence.nth", "modulename": "pyiter.sequence", "qualname": "Sequence.nth", "type": "function", "doc": "<p>Returns the nth element of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;c&#39;</span>\n</code></pre></div>\n", "signature": "(self, n: int) -> ~T", "funcdef": "def"}, "pyiter.sequence.Sequence.windowed": {"fullname": "pyiter.sequence.Sequence.windowed", "modulename": "pyiter.sequence", "qualname": "Sequence.windowed", "type": "function", "doc": "<p>Returns a Sequence of all possible sliding windows of size [size] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre></div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">windowed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;], [&#39;e&#39;, &#39;f&#39;]]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    size: int,\n    step: int = 1,\n    partialWindows: bool = False\n) -> pyiter.sequence.Sequence[typing.List[~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.chunked": {"fullname": "pyiter.sequence.Sequence.chunked", "modulename": "pyiter.sequence", "qualname": "Sequence.chunked", "type": "function", "doc": "<p>Returns a Sequence of all possible chunks of size [size] from the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">chunked</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;d&#39;, &#39;e&#39;]]</span>\n</code></pre></div>\n", "signature": "(self, size: int) -> pyiter.sequence.Sequence[typing.List[~T]]", "funcdef": "def"}, "pyiter.sequence.Sequence.concat": {"fullname": "pyiter.sequence.Sequence.concat", "modulename": "pyiter.sequence", "qualname": "Sequence.concat", "type": "function", "doc": "<p>Returns a Sequence of all elements of the given Sequence, followed by all elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">lst2</span><span class=\"p\">,</span> <span class=\"n\">lst3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3, 4, 5, 6]</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    *other: pyiter.sequence.Sequence[~T]\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.join": {"fullname": "pyiter.sequence.Sequence.join", "modulename": "pyiter.sequence", "qualname": "Sequence.join", "type": "function", "doc": "<p>Joins the elements of the given Sequence into a string.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;a, b, c&#39;</span>\n</code></pre></div>\n", "signature": "(self, separator: str = ' ') -> str", "funcdef": "def"}, "pyiter.sequence.Sequence.progress": {"fullname": "pyiter.sequence.Sequence.progress", "modulename": "pyiter.sequence", "qualname": "Sequence.progress", "type": "function", "doc": "<p>Returns a Sequence that enable a progress bar for the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">parallel_map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">),</span> <span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">progress</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">():</span> <span class=\"k\">pass</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    progress_func: Callable[[Iterable[~T]], Iterable[~T]]\n) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.to_set": {"fullname": "pyiter.sequence.Sequence.to_set", "modulename": "pyiter.sequence", "qualname": "Sequence.to_set", "type": "function", "doc": "<p>Returns a set containing all elements of this Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_set</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n", "signature": "(self) -> Set[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.to_dict": {"fullname": "pyiter.sequence.Sequence.to_dict", "modulename": "pyiter.sequence", "qualname": "Sequence.to_dict", "type": "function", "doc": "<p>Returns a [Dict] containing key-value Tuple provided by [transform] function\napplied to elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"go\">{1: &#39;1&#39;, 2: &#39;2&#39;, 3: &#39;3&#39;}</span>\n</code></pre></div>\n", "signature": "(\n    self,\n    transform: Union[Callable[[~T], Tuple[~K, ~V]], NoneType] = None\n) -> Dict[~K, ~V]", "funcdef": "def"}, "pyiter.sequence.Sequence.to_list": {"fullname": "pyiter.sequence.Sequence.to_list", "modulename": "pyiter.sequence", "qualname": "Sequence.to_list", "type": "function", "doc": "<p>Returns a list with elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</span>\n</code></pre></div>\n", "signature": "(self) -> List[~T]", "funcdef": "def"}, "pyiter.sequence.Sequence.let": {"fullname": "pyiter.sequence.Sequence.let", "modulename": "pyiter.sequence", "qualname": "Sequence.let", "type": "function", "doc": "<p>Calls the specified function [block] with <code>self</code> value as its argument and returns its result.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">let</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;!&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a!&#39;, &#39;b!&#39;, &#39;c!&#39;]</span>\n</code></pre></div>\n", "signature": "(self, block: Callable[[pyiter.sequence.Sequence[~T]], ~R]) -> ~R", "funcdef": "def"}, "pyiter.sequence.Sequence.also": {"fullname": "pyiter.sequence.Sequence.also", "modulename": "pyiter.sequence", "qualname": "Sequence.also", "type": "function", "doc": "<p>Calls the specified function [block] with <code>self</code> value as its argument and returns <code>self</code> value.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">also</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;!&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div>\n", "signature": "(self, block: Callable[[pyiter.sequence.Sequence[~T]], ~R]) -> ~R", "funcdef": "def"}, "pyiter.sequence.FilteringSequence": {"fullname": "pyiter.sequence.FilteringSequence", "modulename": "pyiter.sequence", "qualname": "FilteringSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.FilteringSequence.__init__": {"fullname": "pyiter.sequence.FilteringSequence.__init__", "modulename": "pyiter.sequence", "qualname": "FilteringSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], predicate: Callable[[~T], bool])", "funcdef": "def"}, "pyiter.sequence.MappingSequence": {"fullname": "pyiter.sequence.MappingSequence", "modulename": "pyiter.sequence", "qualname": "MappingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~R]"}, "pyiter.sequence.MappingSequence.__init__": {"fullname": "pyiter.sequence.MappingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "MappingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], transform: Callable[[~T], ~R])", "funcdef": "def"}, "pyiter.sequence.ParallelMappingSequence": {"fullname": "pyiter.sequence.ParallelMappingSequence", "modulename": "pyiter.sequence", "qualname": "ParallelMappingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~R]"}, "pyiter.sequence.ParallelMappingSequence.__init__": {"fullname": "pyiter.sequence.ParallelMappingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "ParallelMappingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[pyiter.sequence.Sequence[~T]],\n    transformer: Callable[[~T], ~R],\n    max_workers: Union[int, NoneType] = None,\n    chunksize: int = 1,\n    executor: Literal['Thread', 'Process'] = 'Thread'\n)", "funcdef": "def"}, "pyiter.sequence.ParallelMappingSequence.Executor": {"fullname": "pyiter.sequence.ParallelMappingSequence.Executor", "modulename": "pyiter.sequence", "qualname": "ParallelMappingSequence.Executor", "type": "variable", "doc": "<p></p>\n", "default_value": " = typing.Literal['Thread', 'Process']"}, "pyiter.sequence.IndexedValue": {"fullname": "pyiter.sequence.IndexedValue", "modulename": "pyiter.sequence", "qualname": "IndexedValue", "type": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~T]"}, "pyiter.sequence.IndexedValue.__init__": {"fullname": "pyiter.sequence.IndexedValue.__init__", "modulename": "pyiter.sequence", "qualname": "IndexedValue.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, index: int, value: ~T)", "funcdef": "def"}, "pyiter.sequence.IndexingSequence": {"fullname": "pyiter.sequence.IndexingSequence", "modulename": "pyiter.sequence", "qualname": "IndexingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[pyiter.sequence.IndexedValue[~T]]"}, "pyiter.sequence.IndexingSequence.__init__": {"fullname": "pyiter.sequence.IndexingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "IndexingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T])", "funcdef": "def"}, "pyiter.sequence.FlatteningSequence": {"fullname": "pyiter.sequence.FlatteningSequence", "modulename": "pyiter.sequence", "qualname": "FlatteningSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~R]"}, "pyiter.sequence.FlatteningSequence.__init__": {"fullname": "pyiter.sequence.FlatteningSequence.__init__", "modulename": "pyiter.sequence", "qualname": "FlatteningSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[pyiter.sequence.Sequence[~T]],\n    transformer: Union[Callable[[~T], ~R], NoneType] = None\n)", "funcdef": "def"}, "pyiter.sequence.DropSequence": {"fullname": "pyiter.sequence.DropSequence", "modulename": "pyiter.sequence", "qualname": "DropSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.DropSequence.__init__": {"fullname": "pyiter.sequence.DropSequence.__init__", "modulename": "pyiter.sequence", "qualname": "DropSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], n: int)", "funcdef": "def"}, "pyiter.sequence.DropWhileSequence": {"fullname": "pyiter.sequence.DropWhileSequence", "modulename": "pyiter.sequence", "qualname": "DropWhileSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.DropWhileSequence.__init__": {"fullname": "pyiter.sequence.DropWhileSequence.__init__", "modulename": "pyiter.sequence", "qualname": "DropWhileSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], predicate: Callable[[~T], bool])", "funcdef": "def"}, "pyiter.sequence.TakeSequence": {"fullname": "pyiter.sequence.TakeSequence", "modulename": "pyiter.sequence", "qualname": "TakeSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.TakeSequence.__init__": {"fullname": "pyiter.sequence.TakeSequence.__init__", "modulename": "pyiter.sequence", "qualname": "TakeSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], n: int)", "funcdef": "def"}, "pyiter.sequence.TakeWhileSequence": {"fullname": "pyiter.sequence.TakeWhileSequence", "modulename": "pyiter.sequence", "qualname": "TakeWhileSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.TakeWhileSequence.__init__": {"fullname": "pyiter.sequence.TakeWhileSequence.__init__", "modulename": "pyiter.sequence", "qualname": "TakeWhileSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], predicate: Callable[[~T], bool])", "funcdef": "def"}, "pyiter.sequence.MergingSequence": {"fullname": "pyiter.sequence.MergingSequence", "modulename": "pyiter.sequence", "qualname": "MergingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~V]"}, "pyiter.sequence.MergingSequence.__init__": {"fullname": "pyiter.sequence.MergingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "MergingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[~T],\n    other: Iterable[~R],\n    transformer: Callable[[~T, ~R], ~V] = <function MergingSequence.<lambda>>\n)", "funcdef": "def"}, "pyiter.sequence.MergingWithNextSequence": {"fullname": "pyiter.sequence.MergingWithNextSequence", "modulename": "pyiter.sequence", "qualname": "MergingWithNextSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~V]"}, "pyiter.sequence.MergingWithNextSequence.__init__": {"fullname": "pyiter.sequence.MergingWithNextSequence.__init__", "modulename": "pyiter.sequence", "qualname": "MergingWithNextSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[~T],\n    transformer: Callable[[~T, ~R], ~V] = <function MergingWithNextSequence.<lambda>>\n)", "funcdef": "def"}, "pyiter.sequence.DistinctSequence": {"fullname": "pyiter.sequence.DistinctSequence", "modulename": "pyiter.sequence", "qualname": "DistinctSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.DistinctSequence.__init__": {"fullname": "pyiter.sequence.DistinctSequence.__init__", "modulename": "pyiter.sequence", "qualname": "DistinctSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[~T],\n    key_selector: Union[Callable[[~T], ~K], NoneType] = None\n)", "funcdef": "def"}, "pyiter.sequence.GroupingSequence": {"fullname": "pyiter.sequence.GroupingSequence", "modulename": "pyiter.sequence", "qualname": "GroupingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[typing.Tuple[~K, pyiter.sequence.Sequence[~T]]]"}, "pyiter.sequence.GroupingSequence.__init__": {"fullname": "pyiter.sequence.GroupingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "GroupingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], key_func: Callable[[~T], ~K])", "funcdef": "def"}, "pyiter.sequence.GroupingSequence.keys": {"fullname": "pyiter.sequence.GroupingSequence.keys", "modulename": "pyiter.sequence", "qualname": "GroupingSequence.keys", "type": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[~K]"}, "pyiter.sequence.GroupingSequence.values": {"fullname": "pyiter.sequence.GroupingSequence.values", "modulename": "pyiter.sequence", "qualname": "GroupingSequence.values", "type": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[pyiter.sequence.Sequence[~T]]"}, "pyiter.sequence.GroupingSequence.items": {"fullname": "pyiter.sequence.GroupingSequence.items", "modulename": "pyiter.sequence", "qualname": "GroupingSequence.items", "type": "variable", "doc": "<p></p>\n", "annotation": ": pyiter.sequence.Sequence[typing.Tuple[~K, pyiter.sequence.Sequence[~T]]]"}, "pyiter.sequence.CombinationSequence": {"fullname": "pyiter.sequence.CombinationSequence", "modulename": "pyiter.sequence", "qualname": "CombinationSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[typing.Tuple[~T, ...]]"}, "pyiter.sequence.CombinationSequence.__init__": {"fullname": "pyiter.sequence.CombinationSequence.__init__", "modulename": "pyiter.sequence", "qualname": "CombinationSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[~T], n: int)", "funcdef": "def"}, "pyiter.sequence.WindowedSequence": {"fullname": "pyiter.sequence.WindowedSequence", "modulename": "pyiter.sequence", "qualname": "WindowedSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[typing.List[~T]]"}, "pyiter.sequence.WindowedSequence.__init__": {"fullname": "pyiter.sequence.WindowedSequence.__init__", "modulename": "pyiter.sequence", "qualname": "WindowedSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[~T],\n    size: int,\n    step: int,\n    partialWindows: bool\n)", "funcdef": "def"}, "pyiter.sequence.ConcatSequence": {"fullname": "pyiter.sequence.ConcatSequence", "modulename": "pyiter.sequence", "qualname": "ConcatSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.ConcatSequence.__init__": {"fullname": "pyiter.sequence.ConcatSequence.__init__", "modulename": "pyiter.sequence", "qualname": "ConcatSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, iterable: Iterable[Iterable[~T]])", "funcdef": "def"}, "pyiter.sequence.ShufflingSequence": {"fullname": "pyiter.sequence.ShufflingSequence", "modulename": "pyiter.sequence", "qualname": "ShufflingSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.ShufflingSequence.__init__": {"fullname": "pyiter.sequence.ShufflingSequence.__init__", "modulename": "pyiter.sequence", "qualname": "ShufflingSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: Iterable[~T],\n    random: Union[random.Random, str, int, NoneType] = None\n)", "funcdef": "def"}, "pyiter.sequence.ProgressSequence": {"fullname": "pyiter.sequence.ProgressSequence", "modulename": "pyiter.sequence", "qualname": "ProgressSequence", "type": "class", "doc": "<p>Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\nprovided by that function.</p>\n\n<p>The values are evaluated lazily, and the sequence is potentially infinite.</p>\n", "bases": "pyiter.sequence.Sequence[~T]"}, "pyiter.sequence.ProgressSequence.__init__": {"fullname": "pyiter.sequence.ProgressSequence.__init__", "modulename": "pyiter.sequence", "qualname": "ProgressSequence.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    iterable: pyiter.sequence.Sequence[~T],\n    progress_func: Callable[[Iterable[~T]], Iterable[~T]]\n)", "funcdef": "def"}, "pyiter.sequence.ProgressSequence.len": {"fullname": "pyiter.sequence.ProgressSequence.len", "modulename": "pyiter.sequence", "qualname": "ProgressSequence.len", "type": "variable", "doc": "<p></p>\n", "annotation": ": int"}, "pyiter.sequence.ProgressSequence.to_list": {"fullname": "pyiter.sequence.ProgressSequence.to_list", "modulename": "pyiter.sequence", "qualname": "ProgressSequence.to_list", "type": "function", "doc": "<p>Returns a list with elements of the given Sequence.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</span>\n</code></pre></div>\n", "signature": "(self) -> List[~T]", "funcdef": "def"}, "pyiter.sequence.throw": {"fullname": "pyiter.sequence.throw", "modulename": "pyiter.sequence", "qualname": "throw", "type": "function", "doc": "<p></p>\n", "signature": "(exception: Exception) -> None", "funcdef": "def"}, "pyiter.sequence.sequence": {"fullname": "pyiter.sequence.sequence", "modulename": "pyiter.sequence", "qualname": "sequence", "type": "function", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<p>Example 3:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sequence</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre></div>\n", "signature": "(*iterable: Iterable[~T]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.seq": {"fullname": "pyiter.sequence.seq", "modulename": "pyiter.sequence", "qualname": "seq", "type": "function", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seq</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre></div>\n", "signature": "(*iterable: Iterable[~T]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.iterate": {"fullname": "pyiter.sequence.iterate", "modulename": "pyiter.sequence", "qualname": "iterate", "type": "function", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">iterate</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre></div>\n", "signature": "(*iterable: Iterable[~T]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}, "pyiter.sequence.it": {"fullname": "pyiter.sequence.it", "modulename": "pyiter.sequence", "qualname": "it", "type": "function", "doc": "<p>Creates an iterator from a list of elements or given Iterable.</p>\n\n<pre><code>Example 1:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 2:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">([</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[&#39;HELLO&#39;, &#39;WORLD&#39;]</span>\n</code></pre></div>\n\n<pre><code>Example 3:\n</code></pre>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">it</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"go\">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n</code></pre></div>\n", "signature": "(*iterable: Iterable[~T]) -> pyiter.sequence.Sequence[~T]", "funcdef": "def"}}, "docInfo": {"pyiter": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 29}, "pyiter.sequence": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 34}, "pyiter.sequence.Sequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 152}, "pyiter.sequence.Sequence.filter_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 149}, "pyiter.sequence.Sequence.filter_is_instance": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 123}, "pyiter.sequence.Sequence.filter_not": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 154}, "pyiter.sequence.Sequence.filter_not_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 115}, "pyiter.sequence.Sequence.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 180}, "pyiter.sequence.Sequence.map_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 195}, "pyiter.sequence.Sequence.map_not_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 184}, "pyiter.sequence.Sequence.parallel_map": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 352}, "pyiter.sequence.Sequence.find": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 134}, "pyiter.sequence.Sequence.find_last": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 135}, "pyiter.sequence.Sequence.first": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.first_not_none_of": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 353}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"qualname": 7, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 336}, "pyiter.sequence.Sequence.first_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.first_or_default": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.last": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.last_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.index_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 208}, "pyiter.sequence.Sequence.last_index_of": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 220}, "pyiter.sequence.Sequence.index_of_first": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 243}, "pyiter.sequence.Sequence.index_of_last": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 253}, "pyiter.sequence.Sequence.single": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.single_or_none": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.drop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 327}, "pyiter.sequence.Sequence.drop_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 136}, "pyiter.sequence.Sequence.skip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 327}, "pyiter.sequence.Sequence.skip_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 136}, "pyiter.sequence.Sequence.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 215}, "pyiter.sequence.Sequence.take_while": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 160}, "pyiter.sequence.Sequence.take_last": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 217}, "pyiter.sequence.Sequence.sorted": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 227}, "pyiter.sequence.Sequence.sorted_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 363}, "pyiter.sequence.Sequence.sorted_descending": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 122}, "pyiter.sequence.Sequence.sorted_by_descending": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 366}, "pyiter.sequence.Sequence.sorted_with": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 160}, "pyiter.sequence.Sequence.associate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 145}, "pyiter.sequence.Sequence.associate_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.associate_by_to": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.all": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 159}, "pyiter.sequence.Sequence.any": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 159}, "pyiter.sequence.Sequence.count": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 188}, "pyiter.sequence.Sequence.contains": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 123}, "pyiter.sequence.Sequence.element_at": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 190}, "pyiter.sequence.Sequence.element_at_or_else": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 181}, "pyiter.sequence.Sequence.element_at_or_default": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 165}, "pyiter.sequence.Sequence.element_at_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 145}, "pyiter.sequence.Sequence.distinct": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 319}, "pyiter.sequence.Sequence.distinct_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 134}, "pyiter.sequence.Sequence.reduce": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 114}, "pyiter.sequence.Sequence.fold": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 120}, "pyiter.sequence.Sequence.sum_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 100}, "pyiter.sequence.Sequence.max_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 98}, "pyiter.sequence.Sequence.max_by_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 270}, "pyiter.sequence.Sequence.max_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 278}, "pyiter.sequence.Sequence.min_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.min_by_or_none": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 270}, "pyiter.sequence.Sequence.min_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 278}, "pyiter.sequence.Sequence.mean_of": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 101}, "pyiter.sequence.Sequence.sum": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 86}, "pyiter.sequence.Sequence.max": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 84}, "pyiter.sequence.Sequence.min": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 84}, "pyiter.sequence.Sequence.mean": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 87}, "pyiter.sequence.Sequence.reversed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 115}, "pyiter.sequence.Sequence.flat_map": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 172}, "pyiter.sequence.Sequence.flatten": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 149}, "pyiter.sequence.Sequence.group_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "pyiter.sequence.Sequence.group_by_to": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 144}, "pyiter.sequence.Sequence.for_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 123}, "pyiter.sequence.Sequence.parallel_for_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 249}, "pyiter.sequence.Sequence.foreach_indexed": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 138}, "pyiter.sequence.Sequence.on_each": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 129}, "pyiter.sequence.Sequence.parallel_on_each": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 259}, "pyiter.sequence.Sequence.on_each_indexed": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 145}, "pyiter.sequence.Sequence.zip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "pyiter.sequence.Sequence.zip_with_next": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 274}, "pyiter.sequence.Sequence.unzip": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 439}, "pyiter.sequence.Sequence.with_index": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 3, "bases": 0, "doc": 119}, "pyiter.sequence.Sequence.shuffled": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 13, "bases": 0, "doc": 382}, "pyiter.sequence.Sequence.partition": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 161}, "pyiter.sequence.Sequence.combinations": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 135}, "pyiter.sequence.Sequence.nth": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 105}, "pyiter.sequence.Sequence.windowed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 485}, "pyiter.sequence.Sequence.chunked": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 154}, "pyiter.sequence.Sequence.concat": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 348}, "pyiter.sequence.Sequence.join": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 112}, "pyiter.sequence.Sequence.progress": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 274}, "pyiter.sequence.Sequence.to_set": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 123}, "pyiter.sequence.Sequence.to_dict": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 270}, "pyiter.sequence.Sequence.to_list": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 88}, "pyiter.sequence.Sequence.let": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 145}, "pyiter.sequence.Sequence.also": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 147}, "pyiter.sequence.FilteringSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.FilteringSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 3}, "pyiter.sequence.MappingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.MappingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 3}, "pyiter.sequence.ParallelMappingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.ParallelMappingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 3}, "pyiter.sequence.ParallelMappingSequence.Executor": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 6, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.IndexedValue": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 87}, "pyiter.sequence.IndexedValue.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "pyiter.sequence.IndexingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 34}, "pyiter.sequence.IndexingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "pyiter.sequence.FlatteningSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.FlatteningSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 3}, "pyiter.sequence.DropSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.DropSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "pyiter.sequence.DropWhileSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.DropWhileSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 3}, "pyiter.sequence.TakeSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.TakeSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "pyiter.sequence.TakeWhileSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.TakeWhileSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 3}, "pyiter.sequence.MergingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.MergingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 13, "bases": 0, "doc": 3}, "pyiter.sequence.MergingWithNextSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.MergingWithNextSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "pyiter.sequence.DistinctSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.DistinctSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 34}, "pyiter.sequence.GroupingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingSequence.keys": {"qualname": 2, "fullname": 4, "annotation": 4, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingSequence.values": {"qualname": 2, "fullname": 4, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.GroupingSequence.items": {"qualname": 2, "fullname": 4, "annotation": 8, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.CombinationSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 34}, "pyiter.sequence.CombinationSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 3}, "pyiter.sequence.WindowedSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 34}, "pyiter.sequence.WindowedSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "pyiter.sequence.ConcatSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.ConcatSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "pyiter.sequence.ShufflingSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.ShufflingSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 3}, "pyiter.sequence.ProgressSequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 34}, "pyiter.sequence.ProgressSequence.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "pyiter.sequence.ProgressSequence.len": {"qualname": 2, "fullname": 4, "annotation": 2, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pyiter.sequence.ProgressSequence.to_list": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 88}, "pyiter.sequence.throw": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 3}, "pyiter.sequence.sequence": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 273}, "pyiter.sequence.seq": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 282}, "pyiter.sequence.iterate": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 282}, "pyiter.sequence.it": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 7, "bases": 0, "doc": 282}}, "length": 145, "save": true}, "index": {"qualname": {"root": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 20, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}}, "df": 95}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 20}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 4, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}, "t": {"docs": {"pyiter.sequence.it": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.iterate": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}}, "r": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 10}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "x": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.len": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}, "n": {"docs": {"pyiter.sequence.ProgressSequence.len": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}}, "df": 10}, "r": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 10}, "n": {"docs": {"pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 6}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.throw": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 11}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}}, "df": 3}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1}}, "df": 1}}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.contains": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 5}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.values": {"tf": 1}}, "df": 1}}}}}}}}, "fullname": {"root": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 20, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.len": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 145}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.len": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.len": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 144}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}}, "df": 2}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 20}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 4, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}, "t": {"docs": {"pyiter.sequence.it": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.iterate": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}}, "r": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 10}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "x": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}, "n": {"docs": {"pyiter.sequence.ProgressSequence.len": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}}, "df": 10}, "r": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 10}, "n": {"docs": {"pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 6}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.throw": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 11}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}}, "df": 3}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1}}, "df": 1}}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.contains": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 5}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.GroupingSequence.values": {"tf": 1}}, "df": 1}}}}}}}}, "annotation": {"root": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}, "pyiter.sequence.ProgressSequence.len": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}, "pyiter.sequence.GroupingSequence.values": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence.items": {"tf": 1.4142135623730951}}, "df": 3, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.GroupingSequence.keys": {"tf": 1}}, "df": 1}, "t": {"docs": {"pyiter.sequence.GroupingSequence.values": {"tf": 1}, "pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.GroupingSequence.values": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.GroupingSequence.items": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.ProgressSequence.len": {"tf": 1}}, "df": 1}}}}}, "default_value": {"root": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1.4142135623730951}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1}}, "df": 1}}}}}}}}}, "signature": {"root": {"1": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 2}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence.__init__": {"tf": 2}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 2}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.throw": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 118, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 113}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}}, "df": 16}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 53, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 35}, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 7}, "v": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 8}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}}, "df": 10, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 22, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.__init__": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 21}, "r": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}}, "df": 4}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.ConcatSequence.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 36}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}}, "df": 24}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 48}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}}, "df": 52}, "r": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 1}}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1}}, "df": 28}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}}, "df": 17, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1}}, "df": 21, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1}}, "df": 15, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1}}, "df": 4}}}}}}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 2}, "r": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}, "t": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 4}, "t": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 9}, "v": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 11}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "n": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.DropSequence.__init__": {"tf": 1}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}, "pyiter.sequence.throw": {"tf": 1}}, "df": 24, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last": {"tf": 1}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.single": {"tf": 1}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1}}, "df": 34}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 4}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.throw": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 5}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 5}}}}}}}, "k": {"docs": {"pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate_by": {"tf": 1}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}}, "df": 9}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1}}, "df": 9}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1}}, "df": 3}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.zip": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1}}, "df": 3}}}}}}}, "bases": {"root": {"docs": {"pyiter.sequence.CombinationSequence": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.GroupingSequence": {"tf": 1}}, "df": 1}, "t": {"docs": {"pyiter.sequence.CombinationSequence": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.IndexingSequence": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 18}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 18, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 10}, "r": {"docs": {"pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}}, "df": 3}, "v": {"docs": {"pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.IndexingSequence": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.WindowedSequence": {"tf": 1}}, "df": 1}}}}}}}}}, "doc": {"root": {"0": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 20}, "1": {"0": {"0": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 7}, "1": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 3}, "2": {"3": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}}, "df": 1}, "docs": {"pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 9}, "3": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 4}, "4": {"docs": {"pyiter.sequence.Sequence.map_indexed": {"tf": 1}}, "df": 1}, "6": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 2}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 2}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 2}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.group_by_to": {"tf": 2}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 86}, "2": {"0": {"0": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "5": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.8284271247461903}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 58}, "3": {"6": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "9": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 2}, "pyiter.sequence.Sequence.filter_not": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.map": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.map_indexed": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.map_not_none": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.parallel_map": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.find": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.find_last": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.index_of": {"tf": 4}, "pyiter.sequence.Sequence.last_index_of": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.index_of_first": {"tf": 4}, "pyiter.sequence.Sequence.index_of_last": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.drop": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.skip": {"tf": 5.291502622129181}, "pyiter.sequence.Sequence.take": {"tf": 4}, "pyiter.sequence.Sequence.take_while": {"tf": 4}, "pyiter.sequence.Sequence.take_last": {"tf": 4}, "pyiter.sequence.Sequence.sorted": {"tf": 4}, "pyiter.sequence.Sequence.sorted_by": {"tf": 7.615773105863909}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 7.615773105863909}, "pyiter.sequence.Sequence.sorted_with": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.associate": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.distinct": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reversed": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.flat_map": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.flatten": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.for_each": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.on_each": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 5.0990195135927845}, "pyiter.sequence.Sequence.unzip": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.with_index": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.shuffled": {"tf": 6.324555320336759}, "pyiter.sequence.Sequence.partition": {"tf": 4}, "pyiter.sequence.Sequence.combinations": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.nth": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.windowed": {"tf": 8.831760866327848}, "pyiter.sequence.Sequence.chunked": {"tf": 4.47213595499958}, "pyiter.sequence.Sequence.concat": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.join": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.to_set": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.to_dict": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.to_list": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.let": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.also": {"tf": 3.7416573867739413}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 3.4641016151377544}, "pyiter.sequence.sequence": {"tf": 4}, "pyiter.sequence.seq": {"tf": 4}, "pyiter.sequence.iterate": {"tf": 4}, "pyiter.sequence.it": {"tf": 4}}, "df": 65}, "docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.to_dict": {"tf": 2.6457513110645907}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 37}, "4": {"9": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 16}, "5": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 4}, "6": {"4": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}}, "df": 5}, "8": {"1": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "9": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}, "docs": {"pyiter": {"tf": 2}, "pyiter.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 10.14889156509222}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 10.198039027185569}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 9}, "pyiter.sequence.Sequence.filter_not": {"tf": 10.14889156509222}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 8.717797887081348}, "pyiter.sequence.Sequence.map": {"tf": 10.908712114635714}, "pyiter.sequence.Sequence.map_indexed": {"tf": 11.445523142259598}, "pyiter.sequence.Sequence.map_not_none": {"tf": 10.908712114635714}, "pyiter.sequence.Sequence.parallel_map": {"tf": 15.620499351813308}, "pyiter.sequence.Sequence.find": {"tf": 9.38083151964686}, "pyiter.sequence.Sequence.find_last": {"tf": 9.38083151964686}, "pyiter.sequence.Sequence.first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 15.264337522473747}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 15.066519173319364}, "pyiter.sequence.Sequence.first_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 11.916375287812984}, "pyiter.sequence.Sequence.last_index_of": {"tf": 12.206555615733702}, "pyiter.sequence.Sequence.index_of_first": {"tf": 12.884098726725126}, "pyiter.sequence.Sequence.index_of_last": {"tf": 13.152946437965905}, "pyiter.sequence.Sequence.single": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.single_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 15.165750888103101}, "pyiter.sequence.Sequence.drop_while": {"tf": 9.695359714832659}, "pyiter.sequence.Sequence.skip": {"tf": 15.165750888103101}, "pyiter.sequence.Sequence.skip_while": {"tf": 9.695359714832659}, "pyiter.sequence.Sequence.take": {"tf": 12.409673645990857}, "pyiter.sequence.Sequence.take_while": {"tf": 10.344080432788601}, "pyiter.sequence.Sequence.take_last": {"tf": 12.409673645990857}, "pyiter.sequence.Sequence.sorted": {"tf": 12.288205727444508}, "pyiter.sequence.Sequence.sorted_by": {"tf": 14.594519519326424}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 8.660254037844387}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 14.594519519326424}, "pyiter.sequence.Sequence.sorted_with": {"tf": 10.246950765959598}, "pyiter.sequence.Sequence.associate": {"tf": 9.433981132056603}, "pyiter.sequence.Sequence.associate_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.all": {"tf": 10.63014581273465}, "pyiter.sequence.Sequence.any": {"tf": 10.63014581273465}, "pyiter.sequence.Sequence.count": {"tf": 11.575836902790225}, "pyiter.sequence.Sequence.contains": {"tf": 9.433981132056603}, "pyiter.sequence.Sequence.element_at": {"tf": 11.575836902790225}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 10.816653826391969}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 10.246950765959598}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 9.643650760992955}, "pyiter.sequence.Sequence.distinct": {"tf": 15.132745950421556}, "pyiter.sequence.Sequence.distinct_by": {"tf": 9.746794344808963}, "pyiter.sequence.Sequence.reduce": {"tf": 8.831760866327848}, "pyiter.sequence.Sequence.fold": {"tf": 9.1104335791443}, "pyiter.sequence.Sequence.sum_of": {"tf": 8.366600265340756}, "pyiter.sequence.Sequence.max_of": {"tf": 8.366600265340756}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 13.379088160259652}, "pyiter.sequence.Sequence.max_by": {"tf": 13.74772708486752}, "pyiter.sequence.Sequence.min_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 13.379088160259652}, "pyiter.sequence.Sequence.min_by": {"tf": 13.74772708486752}, "pyiter.sequence.Sequence.mean_of": {"tf": 8.366600265340756}, "pyiter.sequence.Sequence.sum": {"tf": 7.745966692414834}, "pyiter.sequence.Sequence.max": {"tf": 7.745966692414834}, "pyiter.sequence.Sequence.min": {"tf": 7.745966692414834}, "pyiter.sequence.Sequence.mean": {"tf": 7.745966692414834}, "pyiter.sequence.Sequence.reversed": {"tf": 8.660254037844387}, "pyiter.sequence.Sequence.flat_map": {"tf": 10.14889156509222}, "pyiter.sequence.Sequence.flatten": {"tf": 9.643650760992955}, "pyiter.sequence.Sequence.group_by": {"tf": 11.357816691600547}, "pyiter.sequence.Sequence.group_by_to": {"tf": 9.219544457292887}, "pyiter.sequence.Sequence.for_each": {"tf": 9.16515138991168}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 13.19090595827292}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 9.695359714832659}, "pyiter.sequence.Sequence.on_each": {"tf": 9.38083151964686}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 13.490737563232042}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 9.899494936611665}, "pyiter.sequence.Sequence.zip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 13.19090595827292}, "pyiter.sequence.Sequence.unzip": {"tf": 16.881943016134134}, "pyiter.sequence.Sequence.with_index": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.shuffled": {"tf": 15.811388300841896}, "pyiter.sequence.Sequence.partition": {"tf": 9.643650760992955}, "pyiter.sequence.Sequence.combinations": {"tf": 8.888194417315589}, "pyiter.sequence.Sequence.nth": {"tf": 8.48528137423857}, "pyiter.sequence.Sequence.windowed": {"tf": 17.46424919657298}, "pyiter.sequence.Sequence.chunked": {"tf": 9.746794344808963}, "pyiter.sequence.Sequence.concat": {"tf": 15.264337522473747}, "pyiter.sequence.Sequence.join": {"tf": 8.602325267042627}, "pyiter.sequence.Sequence.progress": {"tf": 14.106735979665885}, "pyiter.sequence.Sequence.to_set": {"tf": 9.16515138991168}, "pyiter.sequence.Sequence.to_dict": {"tf": 13.2664991614216}, "pyiter.sequence.Sequence.to_list": {"tf": 7.280109889280518}, "pyiter.sequence.Sequence.let": {"tf": 9.695359714832659}, "pyiter.sequence.Sequence.also": {"tf": 9.797958971132712}, "pyiter.sequence.FilteringSequence": {"tf": 2.449489742783178}, "pyiter.sequence.FilteringSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.MappingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.MappingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.ParallelMappingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingSequence.Executor": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue": {"tf": 4}, "pyiter.sequence.IndexedValue.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.IndexingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.FlatteningSequence": {"tf": 2.449489742783178}, "pyiter.sequence.FlatteningSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.DropSequence": {"tf": 2.449489742783178}, "pyiter.sequence.DropSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.DropWhileSequence": {"tf": 2.449489742783178}, "pyiter.sequence.DropWhileSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeSequence": {"tf": 2.449489742783178}, "pyiter.sequence.TakeSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeWhileSequence": {"tf": 2.449489742783178}, "pyiter.sequence.TakeWhileSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.MergingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingWithNextSequence": {"tf": 2.449489742783178}, "pyiter.sequence.MergingWithNextSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.DistinctSequence": {"tf": 2.449489742783178}, "pyiter.sequence.DistinctSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.GroupingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingSequence.keys": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingSequence.values": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingSequence.items": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationSequence": {"tf": 2.449489742783178}, "pyiter.sequence.CombinationSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.WindowedSequence": {"tf": 2.449489742783178}, "pyiter.sequence.WindowedSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ConcatSequence": {"tf": 2.449489742783178}, "pyiter.sequence.ConcatSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ShufflingSequence": {"tf": 2.449489742783178}, "pyiter.sequence.ShufflingSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence": {"tf": 2.449489742783178}, "pyiter.sequence.ProgressSequence.__init__": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence.len": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 7.280109889280518}, "pyiter.sequence.throw": {"tf": 1.7320508075688772}, "pyiter.sequence.sequence": {"tf": 13.674794331177344}, "pyiter.sequence.seq": {"tf": 14}, "pyiter.sequence.iterate": {"tf": 14}, "pyiter.sequence.it": {"tf": 14}}, "df": 145, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}}, "df": 2}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 21}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 14}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 6}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 29, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 83, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 23}}, "e": {"docs": {"pyiter.sequence.iterate": {"tf": 1.7320508075688772}}, "df": 1}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}, "n": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 17, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 2, "s": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 4, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.with_index": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 3, "o": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 3}, "s": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 6}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 14}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "a": {"1": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}}, "df": 4}, "2": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}}, "df": 3}, "docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.take_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 2}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 2}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flatten": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.unzip": {"tf": 3}, "pyiter.sequence.Sequence.with_index": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 2}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.concat": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.join": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 90, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 28, "d": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 30}, "y": {"docs": {"pyiter.sequence.Sequence.any": {"tf": 1.7320508075688772}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 23}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 16}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 9}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.unzip": {"tf": 2}}, "df": 9}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}}, "df": 6}}}}}, "a": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}}, "df": 4}, "d": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 6, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1}}, "df": 1}}, "s": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence": {"tf": 1.4142135623730951}}, "df": 50}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 17}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 13}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "n": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}}, "df": 9, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}}, "df": 3}}, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}, "f": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 68}, "r": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 17, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}}, "df": 9}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 4}}}, "b": {"1": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}}, "df": 3}, "2": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.last_index_of": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.take": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_while": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.unzip": {"tf": 2.8284271247461903}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.4142135623730951}}, "df": 52, "y": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 33}, "b": {"docs": {}, "df": 0, "b": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.7320508075688772}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 2}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.fold": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sum": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.MappingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.IndexingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.FlatteningSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.DropSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.DropWhileSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.DistinctSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.GroupingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.CombinationSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.WindowedSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.ConcatSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.ShufflingSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 90, "i": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 2}}, "n": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence": {"tf": 1.4142135623730951}}, "df": 30}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 11}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pyiter": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 51, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.contains": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}}, "df": 8}}, "y": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 2}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 2}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "\u3001": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 44, "s": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.any": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.count": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 54}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 8}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"1": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 2}}, "df": 1}, "2": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 2}}, "df": 1}, "3": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of": {"tf": 2}, "pyiter.sequence.Sequence.last_index_of": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.drop": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.all": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.any": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.count": {"tf": 2}, "pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct": {"tf": 2}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by": {"tf": 2}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.min_by": {"tf": 2}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_dict": {"tf": 2}}, "df": 73}}, "t": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 2}, "t": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 94}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}}, "df": 7, "s": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 6}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 2}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}}, "df": 5, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}}, "df": 33, "s": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 50}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 87}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 17}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"pyiter.sequence.seq": {"tf": 1.7320508075688772}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}}, "df": 86, "s": {"docs": {"pyiter.sequence.Sequence.flatten": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"pyiter.sequence.Sequence.to_set": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 17}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}}, "df": 4}}, "m": {"docs": {"pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.all": {"tf": 1}, "pyiter.sequence.Sequence.any": {"tf": 1}, "pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 1}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.skip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}}, "df": 3}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 2}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.progress": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.reduce": {"tf": 1}, "pyiter.sequence.Sequence.fold": {"tf": 1}, "pyiter.sequence.Sequence.sum_of": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.mean_of": {"tf": 1}, "pyiter.sequence.Sequence.sum": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.min": {"tf": 1}, "pyiter.sequence.Sequence.mean": {"tf": 1}, "pyiter.sequence.Sequence.for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}, "pyiter.sequence.Sequence.nth": {"tf": 1}, "pyiter.sequence.Sequence.windowed": {"tf": 1}, "pyiter.sequence.Sequence.chunked": {"tf": 1}, "pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.join": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 73}}}}, "t": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.filter_not": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.map_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.map_not_none": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_map": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.find": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.find_last": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.last_index_of": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_first": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.index_of_last": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.drop": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.drop_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.skip": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.skip_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.take": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.take_while": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.take_last": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3}, "pyiter.sequence.Sequence.sorted_with": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.associate": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.all": {"tf": 3.3166247903554}, "pyiter.sequence.Sequence.any": {"tf": 3.3166247903554}, "pyiter.sequence.Sequence.count": {"tf": 3.7416573867739413}, "pyiter.sequence.Sequence.contains": {"tf": 3}, "pyiter.sequence.Sequence.element_at": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 3}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 3}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 3}, "pyiter.sequence.Sequence.distinct": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.distinct_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reduce": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.fold": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sum_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.max_by": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.min_by": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.mean_of": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.sum": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.max": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.min": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.mean": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.reversed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.flat_map": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.flatten": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.group_by": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.group_by_to": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.for_each": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.on_each": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.unzip": {"tf": 4.898979485566356}, "pyiter.sequence.Sequence.with_index": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.shuffled": {"tf": 4.58257569495584}, "pyiter.sequence.Sequence.partition": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.combinations": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.nth": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.windowed": {"tf": 4.242640687119285}, "pyiter.sequence.Sequence.chunked": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.concat": {"tf": 4.58257569495584}, "pyiter.sequence.Sequence.join": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.progress": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_dict": {"tf": 3.4641016151377544}, "pyiter.sequence.Sequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.also": {"tf": 1.7320508075688772}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.7320508075688772}, "pyiter.sequence.sequence": {"tf": 3}, "pyiter.sequence.seq": {"tf": 3}, "pyiter.sequence.iterate": {"tf": 3}, "pyiter.sequence.it": {"tf": 3}}, "df": 86}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 3, "s": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.7320508075688772}}, "df": 1, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.drop": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.skip": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.take": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reversed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 2}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.Sequence.with_index": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.shuffled": {"tf": 2.449489742783178}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.combinations": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.concat": {"tf": 2}, "pyiter.sequence.Sequence.join": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.to_list": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1.4142135623730951}}, "df": 42, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1}, "pyiter.sequence.FilteringSequence": {"tf": 1}, "pyiter.sequence.MappingSequence": {"tf": 1}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1}, "pyiter.sequence.IndexingSequence": {"tf": 1}, "pyiter.sequence.FlatteningSequence": {"tf": 1}, "pyiter.sequence.DropSequence": {"tf": 1}, "pyiter.sequence.DropWhileSequence": {"tf": 1}, "pyiter.sequence.TakeSequence": {"tf": 1}, "pyiter.sequence.TakeWhileSequence": {"tf": 1}, "pyiter.sequence.MergingSequence": {"tf": 1}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1}, "pyiter.sequence.DistinctSequence": {"tf": 1}, "pyiter.sequence.GroupingSequence": {"tf": 1}, "pyiter.sequence.CombinationSequence": {"tf": 1}, "pyiter.sequence.WindowedSequence": {"tf": 1}, "pyiter.sequence.ConcatSequence": {"tf": 1}, "pyiter.sequence.ShufflingSequence": {"tf": 1}, "pyiter.sequence.ProgressSequence": {"tf": 1}}, "df": 19}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_is_instance": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1}, "pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.to_set": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}}, "df": 24}}}, "s": {"docs": {"pyiter.sequence.Sequence.contains": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.concat": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.combinations": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1.7320508075688772}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4, "s": {"docs": {"pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.chunked": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 2}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.sequence": {"tf": 1}, "pyiter.sequence.seq": {"tf": 1}, "pyiter.sequence.iterate": {"tf": 1}, "pyiter.sequence.it": {"tf": 1}}, "df": 4}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.contains": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"pyiter.sequence.Sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}, "pyiter.sequence.FilteringSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ParallelMappingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.IndexingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.FlatteningSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DropWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.TakeWhileSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.MergingWithNextSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.DistinctSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.GroupingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.CombinationSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.WindowedSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ConcatSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ShufflingSequence": {"tf": 1.4142135623730951}, "pyiter.sequence.ProgressSequence": {"tf": 1.4142135623730951}}, "df": 22}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 2.23606797749979}}, "df": 1}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}}, "df": 7}}}}}}, "p": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.parallel_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.sequence": {"tf": 1.7320508075688772}, "pyiter.sequence.seq": {"tf": 1.7320508075688772}, "pyiter.sequence.iterate": {"tf": 1.7320508075688772}, "pyiter.sequence.it": {"tf": 1.7320508075688772}}, "df": 13, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.7320508075688772}}, "df": 1, "[": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.max_of": {"tf": 1}, "pyiter.sequence.Sequence.max": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.element_at": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"pyiter.sequence.Sequence.min": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.mean": {"tf": 1.4142135623730951}}, "df": 2}}}}, "x": {"docs": {"pyiter.sequence.Sequence.filter": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_indexed": {"tf": 1}, "pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.find": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.find_last": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.index_of_first": {"tf": 2}, "pyiter.sequence.Sequence.index_of_last": {"tf": 2}, "pyiter.sequence.Sequence.drop_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.skip_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.take_while": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 2}, "pyiter.sequence.Sequence.associate": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.all": {"tf": 2}, "pyiter.sequence.Sequence.any": {"tf": 2}, "pyiter.sequence.Sequence.count": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_else": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sum_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by": {"tf": 2}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2}, "pyiter.sequence.Sequence.min_by": {"tf": 2}, "pyiter.sequence.Sequence.mean_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.group_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.for_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 2}, "pyiter.sequence.Sequence.foreach_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 2}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.unzip": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.partition": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.progress": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}, "pyiter.sequence.sequence": {"tf": 2.6457513110645907}, "pyiter.sequence.seq": {"tf": 2.6457513110645907}, "pyiter.sequence.iterate": {"tf": 2.6457513110645907}, "pyiter.sequence.it": {"tf": 2.6457513110645907}}, "df": 53}, "n": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1}, "pyiter.sequence.Sequence.skip": {"tf": 1}, "pyiter.sequence.Sequence.take": {"tf": 1}, "pyiter.sequence.Sequence.take_last": {"tf": 1}, "pyiter.sequence.Sequence.combinations": {"tf": 1}}, "df": 5, "o": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}}, "df": 7, "t": {"docs": {"pyiter.sequence.Sequence.filter_not": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.filter_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}}, "df": 7}, "n": {"docs": {"pyiter.sequence.Sequence.map_not_none": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1}}, "df": 3, "e": {"docs": {"pyiter.sequence.Sequence.filter_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.element_at_or_none": {"tf": 2}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.on_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.on_each_indexed": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 13}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_indexed": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.map_not_none": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.parallel_map": {"tf": 2}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 2}, "pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 2}, "pyiter.sequence.Sequence.sorted_by": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 3.1622776601683795}, "pyiter.sequence.Sequence.max_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.max_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.min_by": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.unzip": {"tf": 2}, "pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pyiter.sequence.Sequence.first_not_null_of_or_none": {"tf": 1.4142135623730951}}, "df": 1}}, "m": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.max_by": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 2.23606797749979}, "pyiter.sequence.Sequence.min_by": {"tf": 2.23606797749979}}, "df": 4, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.Sequence.count": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1}}, "df": 2}, "x": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.nth": {"tf": 1.4142135623730951}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.parallel_map": {"tf": 1}, "pyiter.sequence.Sequence.parallel_for_each": {"tf": 1}, "pyiter.sequence.Sequence.parallel_on_each": {"tf": 1}, "pyiter.sequence.Sequence.progress": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.find": {"tf": 1}, "pyiter.sequence.Sequence.find_last": {"tf": 1}, "pyiter.sequence.Sequence.first_not_none_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}}, "df": 5}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.drop_while": {"tf": 1}, "pyiter.sequence.Sequence.skip_while": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.partition": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.reversed": {"tf": 1}, "pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.with_index": {"tf": 1}, "pyiter.sequence.Sequence.to_list": {"tf": 1}, "pyiter.sequence.Sequence.let": {"tf": 1}, "pyiter.sequence.Sequence.also": {"tf": 1}, "pyiter.sequence.IndexedValue": {"tf": 1}, "pyiter.sequence.ProgressSequence.to_list": {"tf": 1}}, "df": 11}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.windowed": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "d": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}, "pyiter.sequence.Sequence.index_of_first": {"tf": 1}, "pyiter.sequence.Sequence.index_of_last": {"tf": 1}, "pyiter.sequence.Sequence.take_while": {"tf": 1}, "pyiter.sequence.Sequence.distinct": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flat_map": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.flatten": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.windowed": {"tf": 2.6457513110645907}, "pyiter.sequence.Sequence.chunked": {"tf": 1.4142135623730951}}, "df": 10, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.index_of": {"tf": 1}, "pyiter.sequence.Sequence.last_index_of": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.drop": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.drop_while": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.sorted_descending": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "f": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.element_at_or_else": {"tf": 2}, "pyiter.sequence.Sequence.element_at_or_default": {"tf": 2.449489742783178}, "pyiter.sequence.IndexedValue": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.associate": {"tf": 1}, "pyiter.sequence.Sequence.to_dict": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pyiter.sequence.Sequence.group_by": {"tf": 1}, "pyiter.sequence.Sequence.group_by_to": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.distinct": {"tf": 1.7320508075688772}, "pyiter.sequence.Sequence.distinct_by": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "y": {"docs": {"pyiter.sequence.Sequence.reduce": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.fold": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.let": {"tf": 1.4142135623730951}, "pyiter.sequence.Sequence.also": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pyiter.sequence.Sequence.sorted": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by": {"tf": 1}, "pyiter.sequence.Sequence.sorted_by_descending": {"tf": 1}, "pyiter.sequence.Sequence.sorted_with": {"tf": 1}, "pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.max_by": {"tf": 1}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 1}, "pyiter.sequence.Sequence.min_by": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.Sequence.flat_map": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pyiter.sequence.Sequence.max_by_or_none": {"tf": 4}, "pyiter.sequence.Sequence.max_by": {"tf": 4}, "pyiter.sequence.Sequence.min_by_or_none": {"tf": 4}, "pyiter.sequence.Sequence.min_by": {"tf": 4}}, "df": 4}}}}, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.zip_with_next": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"pyiter.sequence.Sequence.unzip": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pyiter.sequence.Sequence.shuffled": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pyiter.sequence.IndexedValue": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pyiter.sequence.sequence": {"tf": 1.4142135623730951}, "pyiter.sequence.seq": {"tf": 1.4142135623730951}, "pyiter.sequence.iterate": {"tf": 1.4142135623730951}, "pyiter.sequence.it": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1, "s": {"docs": {"pyiter.sequence.Sequence.join": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"pyiter.sequence.sequence": {"tf": 2}, "pyiter.sequence.seq": {"tf": 2}, "pyiter.sequence.iterate": {"tf": 2}, "pyiter.sequence.it": {"tf": 2}}, "df": 4}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();